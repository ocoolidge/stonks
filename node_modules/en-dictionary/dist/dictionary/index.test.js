"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const en_wordnet_1 = __importDefault(require("en-wordnet"));
const dictionary_1 = __importDefault(require("../dictionary"));
const dictionary = new dictionary_1.default(en_wordnet_1.default.get('3.0'));
describe("Test the dictionary", () => {
    beforeAll(() => __awaiter(this, void 0, void 0, function* () {
        yield dictionary.init();
    }), 20000);
    test('Test searchWord', () => {
        console.time('search');
        let result = dictionary.searchFor(['coaxing']);
        console.timeEnd('search');
        expect(result.get('coaxing').lemma).toBe('coaxing');
        expect(result.get('coaxing').pos).toBe('noun');
        expect(result.get('coaxing').offsetData.map(item => item.words).join(',')).toContain('coaxing');
        expect(result.get('coaxing').offsetData.map(item => item.glossary).join(',')).toContain('flattery designed to gain');
        console.time('search2');
        result = dictionary.searchFor(['yet', 'preposterous']);
        console.timeEnd('search2');
        expect(result.get('yet').lemma).toBe('yet');
        expect(result.get('yet').pos).toBe('adverb');
        expect(result.get('yet').offsetData.map(item => item.words).join(',')).toContain('yet');
        expect(result.get('yet').offsetData.map(item => item.glossary).join(',')).toContain('largest drug bust yet');
    });
    test('Test searchOffsetsInData', () => {
        console.time('searchOffsetsInData');
        const result = dictionary.searchOffsetsInDataFor([12787364, 2570643]);
        console.timeEnd('searchOffsetsInData');
        expect(result.get(12787364).offset).toBe(12787364);
        expect(result.get(2570643).offset).toBe(2570643);
    });
    test('Test searchSimple', () => {
        console.time('searchSimple-drink,train');
        const result = dictionary.searchSimpleFor(['drink', 'train']);
        console.timeEnd('searchSimple-drink,train');
        expect(result.get('drink').meaning).toBe('a single serving of a beverage');
    });
    test('Test wordsStartingWith', () => {
        console.time('wordsStartingWith');
        const result = dictionary.wordsStartingWith('bring');
        console.timeEnd('wordsStartingWith');
        expect(result.length).toBe(24);
    });
    test('Test wordsEndingWith', () => {
        console.time('wordsEndingWith');
        const result = dictionary.wordsEndingWith('bring');
        console.timeEnd('wordsEndingWith');
        expect(result.length).toBe(1);
    });
    test('Test wordsIncluding', () => {
        console.time('wordsIncluding');
        const result = dictionary.wordsIncluding('bring');
        console.timeEnd('wordsIncluding');
        expect(result.length).toBe(25);
    });
    test('Test wordsUsingAllCharactersFrom', () => {
        console.time('wordsUsingAllCharactersFrom');
        const result = dictionary.wordsUsingAllCharactersFrom('bringing');
        console.timeEnd('wordsUsingAllCharactersFrom');
        expect(result.length).toBe(6);
    });
    test('Test wordsWithCharsIn', () => {
        console.time('wordsWithCharsIn');
        const result = dictionary.wordsWithCharsIn('precipitate');
        console.timeEnd('wordsWithCharsIn');
        expect(result.size).toBe(7);
        console.time('wordsWithCharsIn-priority');
        const result2 = dictionary.wordsWithCharsIn('precipitate', 'abc');
        console.timeEnd('wordsWithCharsIn-priority');
        expect(result2.size).toBe(7);
    });
    test('Test hasAllCharsIn', () => {
        expect(dictionary_1.default.hasAllCharsIn('bringing', 'ing')).toBe(true);
        expect(dictionary_1.default.hasAllCharsIn('bringing', 'ding')).toBe(false);
    });
    test('Test weird inputs', () => {
        expect(dictionary.searchFor(['']).size).toBe(0);
        expect(dictionary.searchFor([]).size).toBe(0);
        expect(dictionary.searchOffsetsInDataFor([-1]).size).toBe(0);
        expect(dictionary.searchOffsetsInDataFor([]).size).toBe(0);
        expect(dictionary.searchSimpleFor([]).size).toBe(0);
        expect(dictionary.searchSimpleFor(['googoogoo']).size).toBe(0);
        expect(dictionary.wordsStartingWith('').length).toBe(0);
        expect(dictionary.wordsStartingWith('mengerti').length).toBe(0);
        expect(dictionary.wordsEndingWith('').length).toBe(0);
        expect(dictionary.wordsEndingWith('mengerti').length).toBe(0);
        expect(dictionary.wordsIncluding('').length).toBe(0);
        expect(dictionary.wordsIncluding('mengerti').length).toBe(0);
        expect(dictionary.wordsUsingAllCharactersFrom('').length).toBe(0);
        expect(dictionary.wordsWithCharsIn('').size).toBe(0);
    });
});
